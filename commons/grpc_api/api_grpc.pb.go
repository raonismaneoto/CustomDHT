// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api.proto

package grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DHTNodeClient is the client API for DHTNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DHTNodeClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Successor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SuccessorResponse, error)
	Predecessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PredecessorResponse, error)
	HandleNewPredecessor(ctx context.Context, in *HandleNewPredecessorRequest, opts ...grpc.CallOption) (*HandleNewPredecessorResponse, error)
	HandleNewSuccessor(ctx context.Context, in *HandleNewSuccessorRequest, opts ...grpc.CallOption) (*HandleNewSuccessorResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
	RepSave(ctx context.Context, in *RepSaveRequest, opts ...grpc.CallOption) (*Empty, error)
	SaveStream(ctx context.Context, opts ...grpc.CallOption) (DHTNode_SaveStreamClient, error)
	QueryStream(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (DHTNode_QueryStreamClient, error)
	Owner(ctx context.Context, in *OwnerRequest, opts ...grpc.CallOption) (*OwnerResponse, error)
}

type dHTNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDHTNodeClient(cc grpc.ClientConnInterface) DHTNodeClient {
	return &dHTNodeClient{cc}
}

func (c *dHTNodeClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_api.DHTNode/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTNodeClient) Successor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SuccessorResponse, error) {
	out := new(SuccessorResponse)
	err := c.cc.Invoke(ctx, "/grpc_api.DHTNode/Successor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTNodeClient) Predecessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PredecessorResponse, error) {
	out := new(PredecessorResponse)
	err := c.cc.Invoke(ctx, "/grpc_api.DHTNode/Predecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTNodeClient) HandleNewPredecessor(ctx context.Context, in *HandleNewPredecessorRequest, opts ...grpc.CallOption) (*HandleNewPredecessorResponse, error) {
	out := new(HandleNewPredecessorResponse)
	err := c.cc.Invoke(ctx, "/grpc_api.DHTNode/HandleNewPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTNodeClient) HandleNewSuccessor(ctx context.Context, in *HandleNewSuccessorRequest, opts ...grpc.CallOption) (*HandleNewSuccessorResponse, error) {
	out := new(HandleNewSuccessorResponse)
	err := c.cc.Invoke(ctx, "/grpc_api.DHTNode/HandleNewSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTNodeClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/grpc_api.DHTNode/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTNodeClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_api.DHTNode/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTNodeClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_api.DHTNode/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTNodeClient) RepSave(ctx context.Context, in *RepSaveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_api.DHTNode/RepSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTNodeClient) SaveStream(ctx context.Context, opts ...grpc.CallOption) (DHTNode_SaveStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DHTNode_ServiceDesc.Streams[0], "/grpc_api.DHTNode/SaveStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dHTNodeSaveStreamClient{stream}
	return x, nil
}

type DHTNode_SaveStreamClient interface {
	Send(*SaveRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type dHTNodeSaveStreamClient struct {
	grpc.ClientStream
}

func (x *dHTNodeSaveStreamClient) Send(m *SaveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dHTNodeSaveStreamClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dHTNodeClient) QueryStream(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (DHTNode_QueryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DHTNode_ServiceDesc.Streams[1], "/grpc_api.DHTNode/QueryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dHTNodeQueryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DHTNode_QueryStreamClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type dHTNodeQueryStreamClient struct {
	grpc.ClientStream
}

func (x *dHTNodeQueryStreamClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dHTNodeClient) Owner(ctx context.Context, in *OwnerRequest, opts ...grpc.CallOption) (*OwnerResponse, error) {
	out := new(OwnerResponse)
	err := c.cc.Invoke(ctx, "/grpc_api.DHTNode/Owner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHTNodeServer is the server API for DHTNode service.
// All implementations should embed UnimplementedDHTNodeServer
// for forward compatibility
type DHTNodeServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	Successor(context.Context, *Empty) (*SuccessorResponse, error)
	Predecessor(context.Context, *Empty) (*PredecessorResponse, error)
	HandleNewPredecessor(context.Context, *HandleNewPredecessorRequest) (*HandleNewPredecessorResponse, error)
	HandleNewSuccessor(context.Context, *HandleNewSuccessorRequest) (*HandleNewSuccessorResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Save(context.Context, *SaveRequest) (*Empty, error)
	Delete(context.Context, *DeleteRequest) (*Empty, error)
	RepSave(context.Context, *RepSaveRequest) (*Empty, error)
	SaveStream(DHTNode_SaveStreamServer) error
	QueryStream(*QueryRequest, DHTNode_QueryStreamServer) error
	Owner(context.Context, *OwnerRequest) (*OwnerResponse, error)
}

// UnimplementedDHTNodeServer should be embedded to have forward compatible implementations.
type UnimplementedDHTNodeServer struct {
}

func (UnimplementedDHTNodeServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDHTNodeServer) Successor(context.Context, *Empty) (*SuccessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Successor not implemented")
}
func (UnimplementedDHTNodeServer) Predecessor(context.Context, *Empty) (*PredecessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predecessor not implemented")
}
func (UnimplementedDHTNodeServer) HandleNewPredecessor(context.Context, *HandleNewPredecessorRequest) (*HandleNewPredecessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleNewPredecessor not implemented")
}
func (UnimplementedDHTNodeServer) HandleNewSuccessor(context.Context, *HandleNewSuccessorRequest) (*HandleNewSuccessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleNewSuccessor not implemented")
}
func (UnimplementedDHTNodeServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDHTNodeServer) Save(context.Context, *SaveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedDHTNodeServer) Delete(context.Context, *DeleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDHTNodeServer) RepSave(context.Context, *RepSaveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepSave not implemented")
}
func (UnimplementedDHTNodeServer) SaveStream(DHTNode_SaveStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveStream not implemented")
}
func (UnimplementedDHTNodeServer) QueryStream(*QueryRequest, DHTNode_QueryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryStream not implemented")
}
func (UnimplementedDHTNodeServer) Owner(context.Context, *OwnerRequest) (*OwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Owner not implemented")
}

// UnsafeDHTNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DHTNodeServer will
// result in compilation errors.
type UnsafeDHTNodeServer interface {
	mustEmbedUnimplementedDHTNodeServer()
}

func RegisterDHTNodeServer(s grpc.ServiceRegistrar, srv DHTNodeServer) {
	s.RegisterService(&DHTNode_ServiceDesc, srv)
}

func _DHTNode_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTNodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.DHTNode/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTNodeServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTNode_Successor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTNodeServer).Successor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.DHTNode/Successor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTNodeServer).Successor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTNode_Predecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTNodeServer).Predecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.DHTNode/Predecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTNodeServer).Predecessor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTNode_HandleNewPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleNewPredecessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTNodeServer).HandleNewPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.DHTNode/HandleNewPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTNodeServer).HandleNewPredecessor(ctx, req.(*HandleNewPredecessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTNode_HandleNewSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleNewSuccessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTNodeServer).HandleNewSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.DHTNode/HandleNewSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTNodeServer).HandleNewSuccessor(ctx, req.(*HandleNewSuccessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTNode_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTNodeServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.DHTNode/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTNodeServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTNode_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTNodeServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.DHTNode/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTNodeServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTNode_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTNodeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.DHTNode/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTNodeServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTNode_RepSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTNodeServer).RepSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.DHTNode/RepSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTNodeServer).RepSave(ctx, req.(*RepSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTNode_SaveStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DHTNodeServer).SaveStream(&dHTNodeSaveStreamServer{stream})
}

type DHTNode_SaveStreamServer interface {
	SendAndClose(*Empty) error
	Recv() (*SaveRequest, error)
	grpc.ServerStream
}

type dHTNodeSaveStreamServer struct {
	grpc.ServerStream
}

func (x *dHTNodeSaveStreamServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dHTNodeSaveStreamServer) Recv() (*SaveRequest, error) {
	m := new(SaveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DHTNode_QueryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DHTNodeServer).QueryStream(m, &dHTNodeQueryStreamServer{stream})
}

type DHTNode_QueryStreamServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type dHTNodeQueryStreamServer struct {
	grpc.ServerStream
}

func (x *dHTNodeQueryStreamServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DHTNode_Owner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTNodeServer).Owner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.DHTNode/Owner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTNodeServer).Owner(ctx, req.(*OwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DHTNode_ServiceDesc is the grpc.ServiceDesc for DHTNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DHTNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_api.DHTNode",
	HandlerType: (*DHTNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DHTNode_Ping_Handler,
		},
		{
			MethodName: "Successor",
			Handler:    _DHTNode_Successor_Handler,
		},
		{
			MethodName: "Predecessor",
			Handler:    _DHTNode_Predecessor_Handler,
		},
		{
			MethodName: "HandleNewPredecessor",
			Handler:    _DHTNode_HandleNewPredecessor_Handler,
		},
		{
			MethodName: "HandleNewSuccessor",
			Handler:    _DHTNode_HandleNewSuccessor_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _DHTNode_Query_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _DHTNode_Save_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DHTNode_Delete_Handler,
		},
		{
			MethodName: "RepSave",
			Handler:    _DHTNode_RepSave_Handler,
		},
		{
			MethodName: "Owner",
			Handler:    _DHTNode_Owner_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveStream",
			Handler:       _DHTNode_SaveStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "QueryStream",
			Handler:       _DHTNode_QueryStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
